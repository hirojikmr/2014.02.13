【2014.02.18】火
課題

確定申告
	○書類を揃える

GAE
	○webapp2 データの保存
	○温度データをhttpアクセスで投げる
	○保存したデータを表示する

LCD
	△I2Cのデバイス認識
		-> コンデンサ入手
	ｘ HELLO WORLD

考察
	PythonでWEBも低レベルもプログラムできる。

注意
	gitでデータを紛失した
	-> commit する前にresetしてしまった。

買い物
	コストコ
	コヒーｘ２袋, 米ｘ2袋, ピザなど

成果
	======>  GAEに対してデータ書き込み


【2014.02.17】
/1)Fに提案するキーワード
/	-> jQuery, HTML5, CSS3, JavaScript
/	-> バズワードはなに？
/	以下をメールした
/	１）jQuery　　　（画面に動きをつける）
/	２）HTML5　　 （画面の構造を作る）
/	３）CSS3　　　  （画面に書式を与える）
/	４）JavaScript　（処理を実行する）
/	=> Javaで提案するらしい。（返信メールする）
/2)Python
/	-> youtube
/	-> Django <----  GAEのデフォルトはwebapp2
/  -> GAE    
		=====>
		=====>  pythonでGAEアップロードできた！！！
		=====>  静的ファイルも公開できる。
		=====>  しかも、コマンドから同期可能！！！
		=====>  Google Storeを使うと保存もできる！
		=====>  さらに、全てがスケーラブル！
		=====>

3)確定申告
	-> 名前だけでも 
		気が向かない。
4)nodejs
	-> 簡単なサイトを作ってみる
5)mongodb
	-> tutorial
	-> ノートパソコンで導入してみる
6)GAE
	-> データの保存
7)modprobe
	-> おおまかになにやってるのか。
8)Go
	-> tutorial
	-> GAE
9)jQuery
	-> 忘れないように
10)DVD整理

11)GIT for Eclipse
	作成したコードが保存できると非常にいい

考察
	・ある程度深さも必要である。
	・広く浅くは、詳細に入らず読むだけに留める
		(wikiで読む程度）

/GWT -> Google Web Toolkit (Ajaxフレームワーク）
/	 -> http://www.gwtproject.org/
/	 -> WEBのフロントエンドを含めたWebアプリを作成できる。
/	 -> JFSとの関連


【2014.02.16】

・GAE
	-> 1. Hello World
			-> DL  (デスクトップ eclipse_kep)
			-> GAEプラグイン導入
			-> https://appengine.google.com/ で app idを取得する。
				(rpi-momox)
			-> 新規のWEB APP作成＋実行
			-> GWTプラグイン要求（Chrome）
			-> war/hoge/main.css
			-> war/index.html    <----- 静的なファイルをおける


	-> 2. GoogleChartでグラフを表示する
			(GoogleDocsのスプレッドシートベース）
			-> 読み込んだ。tmp。
			==> ガジェットというのがない。
				（とりあえずグラフの共有で表示してみる)
				http://rpi-momox.appspot.com

	-> 3. 温度センサで室温のログを取る (CVS)
			-> 昨晩の6時間分のデータ収集済み。

	-> 4. 他
			-> GITを導入してみる
						==> よくわからないので保留
				Eclipseから使ってみる
				EGITをインストールする
				文字コードの指定 general -> workspace 

			-> directory indexをONにできるのか？ 
				 	-> すぐに設定は見つからなず
				   -> servletよりPythonのほうが良いのでは？
            ==> とりあえず静的ファイルは使えるのでOKとする）
		
	-> 5. GAE
			-> チュートリアルをざっと見る。
			 (キーワード)
				auto scaling (apache JMeter)

			（注意）
			Google SDKs
				Google Web Toolkit 
				Google App Engine  <--------- これだけをチェックする

　　　　　--> そうすると、普通のサーブレットになる

	-> 6. 温度センサデータ公開
			昼過ぎの変化がみえるか

	=============>  GoogleAppEngineに公開してみた。
						 整形して、Google＋とFBに公開。

・RPi
	-> 1.温度センサをDeviceHubに登録する
	-> 2.GAE上のJavaScriptファイルから温度センサのデータに
		  アクセスしてみる。

   (研究）
	 定期的にGoogleAppEngineのデータストアの書き込んで
	 室温データを保存できないだろうか。

	要は、恒久的にデータを保持させる仕組みがあるといい。
	自分でサーバを管理せずに、既存のインフラを利用して保持させる。
   -> GAEでサーブレットを公開する。

	-> 3. I2C、シリアル通信、1-wire
			ドライバとカーネルの関係を知りたい

			(一番簡単なデバイスドライバとカーネルの関係）

・mongodb 
	-> ノートパソコン上に最新Ubuntuを準備する
	-> mongodbのチュートリアルをやってみる
 	-> nodejs
	-> http://osintegrators.com/grannynodeを動かしてみる
	->  チュートリアルをYoutubeで見てみる

・nodejs
	-> 恒久的に動かせるサイトはないのか？
	-> GAEでも動かせるようだ。
	->  チュートリアルを見る

・JavaScript
	-> どんな可能性があるのだろうか。
	-> dot install でGoogle関連の動画をみる（GoogleFeed）
		検索させてそれに関するフィードを表示する事もできる。
		
		==> サンプルを作ってみる。（感じだけで止める）
	-> Google Startupの視点
		https://developers.google.com/products/

・Goとはどんな言語なの
	->  チュートリアルをYoutubeで見る

・整理、整頓
	-> HDDの中身の整理 (必要なデータはDVD化）
		（小さなデータは、GoogleDriveへ）
		=> とりあえず内容がわかるように印刷する。
	-> DVDの整理
		(種類を分ける:音楽、ソフト、研修データなど）
		 => 未完了

・考察
	-> シリアルケーブルでRPiとの通信
		フォントを変更すると不具合がある
		しかし、通信をしている実感が持てる。
		HWとのやりとりが見えているところがいい。
	-> シリアル通信か1-wire通信のプログラムを特定する。C言語で。

   温度センサ
	-> 1-wireのドライバ、devを読んだ時に、温度を返している。
		ということは、温度センサに対するドライバがあるということ。
		なので、この部分を読むと何をしているかわかるかも。

			pi@raspberrypi ~/linux/drivers/w1/slaves $ tree
			.
			├── Kconfig
			├── Makefile
			├── w1_bq27000.c
			├── w1_ds2408.c
			├── w1_ds2413.c
			├── w1_ds2423.c
			├── w1_ds2431.c
			├── w1_ds2433.c
			├── w1_ds2760.c
			├── w1_ds2760.h
			├── w1_ds2780.c
			├── w1_ds2780.h
			├── w1_ds2781.c
			├── w1_ds2781.h
			├── w1_ds28e04.c
			├── w1_smem.c
			└── w1_therm.c



・他
	どんなモバイルアプリがあるか？
		-> SmartNewsは使いやすい。データを集めているだけ。（Google.Feed)
	 jQueryも復習する。

・一日の振り返り
	 ・GAEで室温データの公開
	 ・Pythonでログの整理
	 ・Google Feed
	 ・HDD整理


【2014.02.15】
土曜日 9AM起床

・部屋の掃除をする。 (PM 2-5)
	ｰ>　*壁を拭く。
		-> 2Hくらいかけて拭いた。
		-> かなり大変だったが、カビもかなり減って気持ちがい。
	ｰ>　*IBMのPCとかHDDの統合と整理
		-> IBM PCのかなにまだ保留中。
		-> メインマシンのHDD(3.5) 500GBにもデータあり.
		-> これらを統合することと、他のHDDドライブのデータの
		   整理が必要である。
 	->  *配線も含めて整理する。
		-> LAN線の整理を行った。
		-> gigabit hubも現在は使っていないので、撤収。
	->   オレンジの入れ物の整頓
		-> 小分けにkokuyoの袋に分ける
		-> 同じものを集めていくことを繰り返すと良い。

  ==> 考察
	->  課題を立てておくことは有効である。
	->  その日に達成したい小さな目標を立てておくと良い。
	->  できなかったことに対する対処はどうするか。
	->  保留になっている分は、logで確認できるようにするとよ。
	

・GAEでサーブレットを作る
	->  長い間公開できる仕組みができる。
	->  Pythonで作成してGAEにアップするデモを見る。
		(RoRに似た部分があるが、難しく見える）

   -> 簡単なファイルの公開ができるといい。
	　 	-> javaでのを見てみる (9:00PM-)
			-> GAEのプラグインがEclipseに入らない -> Eclipseダウンロード中
			===> Keplerを新規にダウンロードする。
				  プラグインは、Eclipseのバージョンによって異なる。
				  GoogleのGAEのチュートリアル参照する。
				  (参考にするチュートリアルの正確性に注意）

・他
	-> マルチディスプレイは実現できないか。(小型LCD）

*Pythonの勉強
	-> ひと通り見た
	-> 特徴的：lambda インデントの利用 for: else:  classの定義
	-> rubyと似ている部分がある。 1995 ruby, 1991 python 
	-> 慣れが必要な部分もある。( hashの処理とか)
	-> wikipedia読む。(かなり多くの企業で使われているようだ）

・コンピュータの世界は何処へ向かうのか
	-> サイトを整理する。（どこを見ると新しい流れが見えるのか調べる）
	-> Google　Amazon などがどんなサービスを提供しているかを見る
	-> WEBの視点、モバイルの視点
	-> ARM intelなどのロードマップ
	-> 初代iPodは、ARMのMPUを使っていた。
	-> 広く浅く知る視点（そこから何か見えてくるのではないか）
	   (詳細すぎることに熱中しすぎてはダメだろう）
		==> emacsの信者たち
		==> gitを深く知る必要はない。
		==> 深すぎるのは問題でもある。全体が見えなくなる。
	-> ローレベルな視点（組込み、SoC、センサー）
	-> ハイレベルな視点（PaaS、nodejs、JavaScript）

・ARMのMシリーズはわかりやすい？
	-> とりあえずRPiを使おう。
・Arduinoはどうなのか？　ｰ>　Quarkは互換SoC
	-> Galileoが出てから試してみる。
・MONOist （組込系のニュース）
*ドットインストールを読もう(google関連)
	-> チャートの作り方を見る
	-> 円グラフまでサンプルを作成してみる。
	-> GoogleDocsのワークシートと連動させるグラフも作れる。
	-> これをGAE上に持って行くと面白いのではないか。
	

＜Raspberry Pi＞
・シリアルケーブルを試す。-> (シリアルの部分の動きをソースでみるといいかも）
	ｰ> ドライバをダウンロード
	-> CDM 2.08.30 WHQL Certified.zip（Googleドライブへ保存） 
	-> 接続順

　　　　　　　　　　黒橙黄
		・・・・・・・・・・・・・ 
		・・・・・・・・・・・・・ 
		P1

		SD   　　　　MPU       USB
				       ETHR

		PWR          HDMI

・温度センサーの接続 (10:35-11:15)
	・接続方法の調査
	1.              GRD	
	2. D		DATA   GPIO4     
	3.		POWER  (connect 2 and 3 with a 4.7k register)
       (bottom view)

	・コマンドからの操作方法

		sudo modprobe w1-gpio
		sudo modprobe w1-therm
		cd /sys/bus/w1/devices/
		ls

	・Pythonからの操作
		サンプルプログラム追加

・LEDの点滅
	・接続方法
		
	・コマンド
		cd /sys/class/gpio/
		echo "18" > export
		cd gpio18/
		echo "out" > direction
		echo "1" > value

	・Pythonから

・LCDを接続する（I2C）
	・問題　->  1uFのコンデンサが足りない
	・接続方法  -> SDA SCLの接続
	　ｰ>　保留する

・RPiで温度の変化のログをとってみる。
	-> 35000件のデータを取得した。(0:30-8:00)
	-> 温度が、14.0C まで下がっていた。
	-> 朝方から温度上昇があると思っていた。
	-> excelでは、35000件のデータをグラフできず。
		GoogleDriveのスプレッドシートではできた。
		さすがにビッグデータを扱っているだけある。



【2014.02.14】

今日は、バレンタインデー
勉強でもするか。

【今日の目標】
(1)gitを使えるようになる。
  --> git 関連のdotinstallを完了する。
  --> (ch1-ch22 AM 3H + PM 1H)

       ==>	非常に有効であった。
			 	時間はかかったがGITは素晴らしいツールである。
					

(2) minixのGPIOの成り立ちを理解する。

 --> ハードウェアとドライバの関係が見たい。
　 （特に、メモリ・マップド I/O とドライバ）

 (アプローチ）
  <a>Raspberry Piのアセンブリのチュートリアル(ケンブリッジ大学）
	--> GPIO上のLEDの制御  

        --> bcmのHWマニュアルは難解である。

        --> BeagleBone Blackはどうか？
            
            ---> 同様に難解。（GPIOのアドレスもすぐにはわからない）

  <b>BeagleBone Black
	--> GPIOのLED制御部分を確認

  ==> アプローチの再考が必要である。
　　　（問題点）
	・HWが想像以上に複雑である。
　　　　　MPUの記述が丁寧でない。H8とかと比較して。
	・アドレスがが長いので読み解くのに時間がかかりすぎる。

		--->	これだけにこだわる必要ない。
			 	そもそも、切り口としてわかりやすいかもしれない
				と思ってアセンブリを見たかった。
				わかりやすい部分があるはずだ。 
				C言語でシリアルの部分を追うのはいいかもしれない。

      （案）
	・I2Cの動きをC言語から追う。
　　　　　（GPIOよりももっと複雑ではないか）

	・シリアル通信の部分

	・いずれにしても動きが見えやすいものから始める

	・MINIXのI/Oの部分を調べる

	・LinuxのI/Oの部分を調べる
	
	・詳細は、調べずに流れだけを読む（ケンブリッジ大学）



(3) raspberry piの場所確保
　→　できるだけ連続稼働させ　簡単にアクセスできるようにする。
 	ｰ>　とりあえず寝室で運用する。(ダメ：湿気がある）
 	->  配線も含めて整理する。


(4) 他に気になるもの
   ->  Node.js (キーワードだけ)
	スレッドモデル、イベントループ
	ノンブロッキングな書き方（コールバックルーチン）

　 -> Node.jsをインストールしてみる
   -> #08まで見た。(#09 npmからは、作成していない。）

   (why nodejs?) 
	non-blocking ｰ>時間のかかるI/Oは、callbackで処理する。
	-> ちょうどGUIのプログラミングと同じように
　	-> eventに対しての処理を記述していく間隔で作る。
	-> でも、それってOSがやってることではないか？
	Tornado(Python non-blocking framework)

   (google V8)
	JavaScript実行エンジン

　(StrongTalk)
	
	SmallTalk

  Granny on Node.js locallyをインストールしてみる
	http://osintegrators.com/grannynode
	-> mongodbのインストール中
		(コンパイル中）
	-> Raspberry Piでは、コンパイルできず。
	　　（途中でエラーになる）

(5) mongodb
	document oriented database
	~~~~~~~~~~~~~~~~~~~~~~~~~~
	No SQL Database

	kinds of databases
	1.RDMS
	2.OLAP
	3.NoSQL --> horizontal scalability (scale out)
		a) key value store
		b) tabular (BigTable)
		c) document oriented (Document oriented)

	NoSQL what is missing?
		No joins
		no complex transaction
		horizontal scalability

	NoSQL Extra
		query
		fast
		horizontal scalable
		
	RDBMS   --> table
	MongoDB --> collection 
		    BSON format
		    Document Object (record in rdbms)
		    number of fields can vary
			(it's like a hash)
	
	OOP    <--> OBJ <--> RDBMS 
	OOP    <--> mongoDB         (no conversion)


【ほか】
・VIMの設定ファイル
