【2014.02.15】
土曜日 9AM起床

・部屋の掃除をする。 (PM 2-5)
	ｰ>　*壁を拭く。
		-> 2Hくらいかけて拭いた。
		-> かなり大変だったが、カビもかなり減って気持ちがい。
	ｰ>　*IBMのPCとかHDDの統合と整理
		-> IBM PCのかなにまだ保留中。
		-> メインマシンのHDD(3.5) 500GBにもデータあり.
		-> これらを統合することと、他のHDDドライブのデータの
		   整理が必要である。
 	->  *配線も含めて整理する。
		-> LAN線の整理を行った。
		-> gigabit hubも現在は使っていないので、撤収。
	->   オレンジの入れ物の整頓
		-> 小分けにkokuyoの袋に分ける
		-> 同じものを集めていくことを繰り返すと良い。

  ==> 考察
	->  課題を立てておくことは有効である。
	->  その日に達成したい小さな目標を立てておくと良い。
	->  できなかったことに対する対処はどうするか。
	->  保留になっている分は、logで確認できるようにするとよ。
	

・GAEでサーブレットを作る
	->  長い間公開できる仕組みができる。

*Pythonの勉強
	-> ひと通り見た
	-> 特徴的：lambda インデントの利用 for: else:  classの定義
	-> rubyと似ている部分がある。 1995 ruby, 1991 python 
	-> 慣れが必要な部分もある。( hashの処理とか)
	-> wikipedia読む。(かなり多くの企業で使われているようだ）

・コンピュータの世界は何処へ向かうのか
	-> サイトを整理する。（どこを見ると新しい流れが見えるのか調べる）
・ARMのMシリーズはわかりやすい？
	-> とりあえずRPiを使おう。
・Arduinoはどうなのか？　ｰ>　Quarkは互換SoC
	-> Galileoが出てから試してみる。
・MONOist （組込系のニュース）
*ドットインストールを読もう(google関連)
	-> 

＜Raspberry Pi＞
・シリアルケーブルを試す。-> (シリアルの部分の動きをソースでみるといいかも）
	ｰ> ドライバをダウンロード
	-> CDM 2.08.30 WHQL Certified.zip（Googleドライブへ保存） 
	-> 接続順

　　　　　　　　　　黒橙黄
		・・・・・・・・・・・・・ 
		・・・・・・・・・・・・・ 
		P1

		SD   　　　　MPU       USB
				       ETHR

		PWR          HDMI

・温度センサーの接続 (10:35-11:15)
	・接続方法の調査
	1.              GRD	
	2. D		DATA   GPIO4     
	3.		POWER  (connect 2 and 3 with a 4.7k register)
       (bottom view)

	・コマンドからの操作方法

		sudo modprobe w1-gpio
		sudo modprobe w1-therm
		cd /sys/bus/w1/devices/
		ls

	・Pythonからの操作
		サンプルプログラム追加

・LEDの点滅
	・接続方法
		
	・コマンド
		cd /sys/class/gpio/
		echo "18" > export
		cd gpio18/
		echo "out" > direction
		echo "1" > value

	・Pythonから

・LCDを接続する（I2C）
	・問題　->  1uFのコンデンサが足りない
	・接続方法  -> SDA SCLの接続
	　ｰ>　保留する



【2014.02.14】

今日は、バレンタインデー
勉強でもするか。

【今日の目標】
(1)gitを使えるようになる。
  --> git 関連のdotinstallを完了する。
  --> (ch1-ch22 AM 3H + PM 1H)

(2) minixのGPIOの成り立ちを理解する。

 --> ハードウェアとドライバの関係が見たい。
　 （特に、メモリ・マップド I/O とドライバ）

 (アプローチ）
  <a>Raspberry Piのアセンブリのチュートリアル(ケンブリッジ大学）
	--> GPIO上のLEDの制御  

        --> bcmのHWマニュアルは難解である。

        --> BeagleBone Blackはどうか？
            
            ---> 同様に難解。（GPIOのアドレスもすぐにはわからない）

  <b>BeagleBone Black
	--> GPIOのLED制御部分を確認

  ==> アプローチの再考が必要である。
　　　（問題点）
	・HWが想像以上に複雑である。
　　　　　MPUの記述が丁寧でない。H8とかと比較して。
	・アドレスがが長いので読み解くのに時間がかかりすぎる。

      （案）
	・I2Cの動きをC言語から追う。
　　　　　（GPIOよりももっと複雑ではないか）

	・シリアル通信の部分

	・いずれにしても動きが見えやすいものから始める

	・MINIXのI/Oの部分を調べる

	・LinuxのI/Oの部分を調べる
	
	・詳細は、調べずに流れだけを読む（ケンブリッジ大学）



(3) raspberry piの場所確保
　→　できるだけ連続稼働させ　簡単にアクセスできるようにする。
 	ｰ>　とりあえず寝室で運用する。(ダメ：湿気がある）
 	->  配線も含めて整理する。


(4) 他に気になるもの
   ->  Node.js (キーワードだけ)
	スレッドモデル、イベントループ
	ノンブロッキングな書き方（コールバックルーチン）

　 -> Node.jsをインストールしてみる
   -> #08まで見た。(#09 npmからは、作成していない。）

   (why nodejs?) 
	non-blocking ｰ>時間のかかるI/Oは、callbackで処理する。
	-> ちょうどGUIのプログラミングと同じように
　	-> eventに対しての処理を記述していく間隔で作る。
	-> でも、それってOSがやってることではないか？
	Tornado(Python non-blocking framework)

   (google V8)
	JavaScript実行エンジン

　(StrongTalk)
	
	SmallTalk

  Granny on Node.js locallyをインストールしてみる
	http://osintegrators.com/grannynode
	-> mongodbのインストール中
		(コンパイル中）
	-> Raspberry Piでは、コンパイルできず。
	　　（途中でエラーになる）

(5) mongodb
	document oriented database
	~~~~~~~~~~~~~~~~~~~~~~~~~~
	No SQL Database

	kinds of databases
	1.RDMS
	2.OLAP
	3.NoSQL --> horizontal scalability (scale out)
		a) key value store
		b) tabular (BigTable)
		c) document oriented (Document oriented)

	NoSQL what is missing?
		No joins
		no complex transaction
		horizontal scalability

	NoSQL Extra
		query
		fast
		horizontal scalable
		
	RDBMS   --> table
	MongoDB --> collection 
		    BSON format
		    Document Object (record in rdbms)
		    number of fields can vary
			(it's like a hash)
	
	OOP    <--> OBJ <--> RDBMS 
	OOP    <--> mongoDB         (no conversion)


【ほか】
・VIMの設定ファイル
