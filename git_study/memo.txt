sudo apt-get install git-core

<入門1>
git config --global core.editor vim

git status
git status --oneline
git status -p oneline


<入門8>
git add hoge.txt
git add .
git mv 
git rm

<入門9>
vim .gitignore <----- ファイルを作成する。
*.log  <------------- 無視するファイルを指定する。

下位ディレクトリにも適応される。

<入門10>
git commit -m "メッセージを追加できます"
git commit --amend        コミット自体を増やさずに。

<入門11>
git reset --hard HEAD   <---- 一つ前へ
git reset --hard HEAD^  <---- も一つ前
git reset --hard d196612 <--- idで指定して

<GitHub>
git push origin  <------ これでGitHubと同期される>
id pass 入力する

<入門12>
git reset --hard ORIG_HEAD  <--- 前回取り消された情報が１つ残ってる。

<好きなところへ戻るには？＞
.git/logs/HEADでIDを調べて
git reset --hard d196612 <--- idで指定して


<入門13> branch
git branch 
git branch hoge
git checkout hoge
git checkout master <---- ものとブランチへもどる

<入門14> merge
git log master
git log hoge1      <---- このようにするとログを比較できる
git log hoge2

git merge hoge1    <----- masterにマージできる
git branch -d hoge2  <--- hoge2はもういらない


<入門15> merge 衝突
git commit -m"初めてのコミット"   --> index.html   1
git checkout -b hogehoge  --> 例）index.htmlを編集 first  に変更
git checkout master       -->     index.htmlを編集 1st    に変更
git merge hogehoge        -->  コンフリクト発生！！

<入門16> 衝突の解決

(1) 

git status           -->  both modified: index.html
<<<<<<<<< HEAD       <-------  masterブランチはこうですよ
line first

==========
line 1st
>>>>>>>>>  hogehoge   <------ hogehogeブランチはこうですよ


(2)

---> どちらかを消せばいい。
例）
line first           <------- masterの方を選んだ

(3)
git commit -a -m "line first選びました"


<入門17>タグ
git tag v1.0         <---- v1.0タグをつける
git reset でも使える
git tag -d v1.0      <---- タグ削除
git tag v1.0 8666d99 <-----ID指定して (このIDに対して付けられる）


<入門18> alias
git config --global alias.co checkout
git config --global alias.st status
git config --global alias.br branch
git config --global alias.ci commit
                          -- ------
git st  <---- status
git config -l 



